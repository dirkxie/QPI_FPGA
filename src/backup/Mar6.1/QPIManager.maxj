/***
    The manager for this design just streams data from CPU to DFE and back via PCI-E.
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class QPIManager extends CustomManager{

    private static final String s_kernelName  = "QPIKernel";
    private static final int size_x = 256;
    private static final int size_y = 256;
    private static final int overhead = size_x * 4 + 2;
    private static final int total_img = 5;
    QPIManager(EngineParameters ep) {
        super(ep);

        KernelBlock k =
	    addKernel(new QPIKernel(makeKernelParameters(s_kernelName), total_img, size_x, size_y)       );

        k.getInput("i1") <== addStreamFromCPU("i1");
        k.getInput("i2") <== addStreamFromCPU("i2");
        k.getInput("i3") <== addStreamFromCPU("i3");
        k.getInput("i4") <== addStreamFromCPU("i4");
        /*
        addStreamToCPU("mean1") <== k.getOutput("mean1");
        addStreamToCPU("mean2") <== k.getOutput("mean2");
        addStreamToCPU("mean3") <== k.getOutput("mean3");
        addStreamToCPU("mean4") <== k.getOutput("mean4");
        */
        /*
        addStreamToCPU("i1_bgs") <== k.getOutput("i1_bgs");
        //addStreamToCPU("i1_bgs_newMin") <== k.getOutput("i1_bgs_newMin");
        addStreamToCPU("i1_bgs_positive") <== k.getOutput("i1_bgs_positive");
        //addStreamToCPU("i1_pos_newMax") <== k.getOutput("i1_pos_newMax");
        addStreamToCPU("i1_norm") <== k.getOutput("i1_norm");
        addStreamToCPU("i2_bgs_positive") <== k.getOutput("i2_bgs_positive");
        addStreamToCPU("i2_norm") <== k.getOutput("i2_norm");
        addStreamToCPU("i6") <== k.getOutput("i6");
        //addStreamToCPU("i8") <== k.getOutput("i8");
        addStreamToCPU("theta_y") <== k.getOutput("theta_y");
        addStreamToCPU("dphi_y") <== k.getOutput("dphi_y");
        */
        addStreamToCPU("G") <== k.getOutput("G");

        addMaxFileConstant("total_img", total_img);
        addMaxFileConstant("size_x", size_x);
        addMaxFileConstant("size_y", size_y);
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int INT_size = type.sizeInBytes();
        int FLOAT_size = CPUTypes.FLOAT.sizeInBytes();
        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam sizeBytes = N * INT_size;

        engine_interface.setTicks(s_kernelName, N);

        engine_interface.setStream("i1", type, sizeBytes);
        engine_interface.setStream("i2", type, sizeBytes);
        engine_interface.setStream("i3", type, sizeBytes);
        engine_interface.setStream("i4", type, sizeBytes);
        
        /* 
        engine_interface.setStream("mean1", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean2", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean3", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean4", CPUTypes.FLOAT, INT_size * size_x);
        */
        //engine_interface.setStream("i1_bgs", CPUTypes.FLOAT, INT_size * size_x * size_y);
        //engine_interface.setStream("i1_bgs_newMin", CPUTypes.FLOAT, INT_size * 4);
        //engine_interface.setStream("i1_bgs_positive", CPUTypes.FLOAT, INT_size * size_x * size_y);
        //engine_interface.setStream("i1_pos_newMax", CPUTypes.FLOAT, INT_size * 4);
        //engine_interface.setStream("i1_norm", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        
        //engine_interface.setStream("i2_bgs_positive", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i2_norm", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i6", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i8", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("theta_y", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("dphi_y", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        engine_interface.setStream("G", CPUTypes.FLOAT, FLOAT_size * size_x * size_y * 2);
        return engine_interface;
    }

    public static void main(String[] args) {
        QPIManager manager = new QPIManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
