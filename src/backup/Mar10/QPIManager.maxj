/***
    The manager for this design just streams data from CPU to DFE and back via PCI-E.
*/
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.build.EngineParameters;

public class QPIManager extends CustomManager{

    //private static final String s_kernelName  = "QPIKernel";
    private static final int size_x = 256;
    private static final int size_y = 256;

    private static final int Kernel_Num0 = 0;
    private static final int Kernel_Num1 = 1;
    private static final int Kernel_Num2 = 2;
    private static final int Kernel_Num3 = 3;

    private static final int Rotator_Num1 = 1;
    private static final int Rotator_Num2 = 2;

    private static final int overhead = size_x * 4 + 2;
    private static final int total_img = 10;
    QPIManager(EngineParameters ep) {
        super(ep);
        ////////// Kernel Declaration /////////
        //QPI_SpaceDomain
        KernelBlock QPI_SpaceDomain = addKernel(new QPIKernel(makeKernelParameters("QPI_SpaceDomain"), total_img, size_x, size_y));
        //2D FFT 256 * 256 point
        KernelBlock FFT16_1 = addKernel(new FFT16Kernel3(makeKernelParameters("FFT16Kernel_1"), size_x, size_y, Kernel_Num0));
        KernelBlock Rotator1 = addKernel(new RotatorKernel(makeKernelParameters("Rotator1"), Rotator_Num1));
        KernelBlock FFT16_2 = addKernel(new FFT16Kernel2(makeKernelParameters("FFT16Kernel_2"), size_x, size_y, Kernel_Num1));
        KernelBlock FFT2DRAM = addKernel(new FFT2DRAM(makeKernelParameters("FFT2DRAM")));
        KernelBlock FFT16_3 = addKernel(new FFT16Kernel3(makeKernelParameters("FFT16Kernel_3"), size_x, size_y, Kernel_Num2));
        KernelBlock Rotator2 = addKernel(new RotatorKernel(makeKernelParameters("Rotator2"), Rotator_Num2));
        KernelBlock FFT16_4 = addKernel(new FFT16Kernel2(makeKernelParameters("FFT16Kernel_4"), size_x, size_y, Kernel_Num3));
        

        ////////// Stream Declaration ////////
        //QPI_Space Domain
        QPI_SpaceDomain.getInput("i1") <== addStreamFromCPU("i1");
        QPI_SpaceDomain.getInput("i2") <== addStreamFromCPU("i2");
        QPI_SpaceDomain.getInput("i3") <== addStreamFromCPU("i3");
        QPI_SpaceDomain.getInput("i4") <== addStreamFromCPU("i4");
        //2D FFT 256 * 256 point
        FFT16_1.getInput("original") <== QPI_SpaceDomain.getOutput("G");
        FFT16_1.getInput("FFT_Stage_Enable") <== QPI_SpaceDomain.getOutput("Next_Enable");
        Rotator1.getInput("DIN") <== FFT16_1.getOutput("Stage_out");
        Rotator1.getInput("Rotator_Enable") <== FFT16_1.getOutput("Next_Enable");
        FFT16_2.getInput("original") <== Rotator1.getOutput("DO");
        FFT16_2.getInput("FFT_Stage2_Enable") <== Rotator1.getOutput("FFT_Stage2_Enable");
        //2D RAM
        FFT2DRAM.getInput("DIN") <== FFT16_2.getOutput("Stage_out");
        FFT2DRAM.getInput("FFT2DRAM_Enable") <== FFT16_2.getOutput("Next_Enable");
        
        //2nd FFT 256
        FFT16_3.getInput("original") <== FFT2DRAM.getOutput("Stage_out");
        FFT16_3.getInput("FFT_Stage_Enable") <== FFT2DRAM.getOutput("Next_Enable");
        Rotator2.getInput("DIN") <== FFT16_3.getOutput("Stage_out");
        Rotator2.getInput("Rotator_Enable") <== FFT16_3.getOutput("Next_Enable");
        FFT16_4.getInput("original") <== Rotator2.getOutput("DO");
        FFT16_4.getInput("FFT_Stage2_Enable") <== Rotator2.getOutput("FFT_Stage2_Enable");
        
        /*
        addStreamToCPU("mean1") <== QPI_SpaceDoamin.getOutput("mean1");
        addStreamToCPU("mean2") <== QPI_SpaceDomain.getOutput("mean2");
        addStreamToCPU("mean3") <== QPI_SpaceDomain.getOutput("mean3");
        addStreamToCPU("mean4") <== QPI_SpaceDOmain.getOutput("mean4");
        */
        /* 
        addStreamToCPU("i1_bgs") <== QPI_SpaceDomain.getOutput("i1_bgs");
        //addStreamToCPU("i1_bgs_newMin") <== QPI_SpaceDomain.getOutput("i1_bgs_newMin");
        addStreamToCPU("i1_bgs_positive") <== QPI_SpaceDomain.getOutput("i1_bgs_positive");
        //addStreamToCPU("i1_pos_newMax") <== QPI_SpaceDomain.getOutput("i1_pos_newMax");
        addStreamToCPU("i1_norm") <== QPI_SpaceDomain.getOutput("i1_norm");
        addStreamToCPU("i2_bgs_positive") <== QPI_SpaceDomain.getOutput("i2_bgs_positive");
        addStreamToCPU("i2_norm") <== QPI_SpaceDomain.getOutput("i2_norm");
        addStreamToCPU("i6") <== QPI_SpaceDomain.getOutput("i6");
        //addStreamToCPU("i8") <== QPI_SpaceDomain.getOutput("i8");
        addStreamToCPU("theta_y") <== QPI_SpaceDomain.getOutput("theta_y");
        addStreamToCPU("dphi_y") <== QPI_SpaceDomain.getOutput("dphi_y");
        */
        //addStreamToCPU("G") <== QPI_SpaceDomain.getOutput("G");

        addMaxFileConstant("total_img", total_img);
        addMaxFileConstant("size_x", size_x);
        addMaxFileConstant("size_y", size_y);
    }

    private static EngineInterface interfaceDefault() {
        EngineInterface engine_interface = new EngineInterface();
        CPUTypes type = CPUTypes.INT32;
        int INT_size = type.sizeInBytes();
        int FLOAT_size = CPUTypes.FLOAT.sizeInBytes();
        InterfaceParam N = engine_interface.addParam("N", CPUTypes.INT);
        InterfaceParam sizeBytes = N * INT_size;
        
        engine_interface.setStream("i1", type, sizeBytes);
        engine_interface.setStream("i2", type, sizeBytes);
        engine_interface.setStream("i3", type, sizeBytes);
        engine_interface.setStream("i4", type, sizeBytes);
         
        engine_interface.setTicks("QPI_SpaceDomain", N);
        engine_interface.setTicks("FFT16Kernel_1", N);
        engine_interface.setTicks("Rotator1", N);
        engine_interface.setTicks("FFT16Kernel_2", N);
        engine_interface.setTicks("FFT2DRAM", N);
        engine_interface.setTicks("FFT16Kernel_3", N);
        engine_interface.setTicks("Rotator2", N);
        engine_interface.setTicks("FFT16Kernel_4", N);
        
        
        /* 
        engine_interface.setStream("mean1", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean2", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean3", CPUTypes.FLOAT, INT_size * size_x);
        engine_interface.setStream("mean4", CPUTypes.FLOAT, INT_size * size_x);
        */
        //engine_interface.setStream("i1_bgs", CPUTypes.FLOAT, INT_size * size_x * size_y);
        //engine_interface.setStream("i1_bgs_newMin", CPUTypes.FLOAT, INT_size * 4);
        //engine_interface.setStream("i1_bgs_positive", CPUTypes.FLOAT, INT_size * size_x * size_y);
        //engine_interface.setStream("i1_pos_newMax", CPUTypes.FLOAT, INT_size * 4);
        //engine_interface.setStream("i1_norm", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        
        //engine_interface.setStream("i2_bgs_positive", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i2_norm", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i6", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("i8", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("theta_y", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("dphi_y", CPUTypes.FLOAT, FLOAT_size * size_x * size_y);
        //engine_interface.setStream("G", CPUTypes.FLOAT, FLOAT_size * size_x * size_y * 2);
        return engine_interface;
    }

    public static void main(String[] args) {
        QPIManager manager = new QPIManager(new EngineParameters(args));
        manager.createSLiCinterface(interfaceDefault());
        manager.build();
    }
}
